mod_1
summary(mod_1)
mod_2 <- lm(gw~timestep+timestep^2, obs)
summary(mod_2)
mod_2 <- lm(gw~timestep+(timestep)^2, obs)
summary(mod_2)
?lm
mod_2 <- lm(gw~timestep+I(timestep^2), obs)
mod_2 <- lm(gw~timestep+I(timestep^2), obs)
summary(mod_2)
obs <- data.frame(timestep = 1:length(ground_water_level), gw = ground_water_level)
mod_obs <- obs[events==0,]
mod_obs
pred_obs <- obs[events>0,]
mod_1 <- lm(gw~timestep, obs)
summary(mod_1)
## Use a quadratic term
mod_2 <- lm(gw~timestep+I(timestep^2), obs)
summary(mod_2)
predict(mod_1, pred_obs)
predict(mod_2, pred_obs)
pred_obs_length_10 <- obs[events>10&events<50,]
pred_obs_length_50 <- obs[events>50,]
mod_1 <- lm(gw~timestep, obs)
summary(mod_1)
## Use a quadratic term
mod_2 <- lm(gw~timestep+I(timestep^2), obs)
summary(mod_2)
predict(mod_2, pred_obs)
predict(mod_2, pred_obs_length_10)
predict(mod_1, pred_obs_length_10)
predict(mod_2, pred_obs_length_10)
predict(mod_1, pred_obs_length_10)
pred_obs_length_10 <- obs[events>10&events<50,]
pred_obs_length_50 <- obs[events>50,]
pred_obs_length_10
events
events>10&events<50
pred_obs_length_10 <- obs[events>10&events<51,]
pred_obs_length_10
obs <- data.frame(timestep = 1:length(ground_water_level), gw = ground_water_level)
mod_obs <- obs[events==0,]
pred_obs_length_10 <- obs[events>10&events<51,]
pred_obs_length_10
pred_obs_length_50 <- obs[events>50,]
mod_1 <- lm(gw~timestep, obs)
summary(mod_1)
## Use a quadratic term
mod_2 <- lm(gw~timestep+I(timestep^2), obs)
summary(mod_2)
predict(mod_1, pred_obs_length_10)
predict(mod_2, pred_obs_length_50)
obs[events>10&events<51,"gw"] <- predict(mod_1, pred_obs_length_10)
obs[events>10&events<51,"gw"] <- predict(mod_12, pred_obs_length_50)
obs[events>10&events<51,"gw"] <- predict(mod_2, pred_obs_length_50)
obs[events>50,"gw"] <- predict(mod_2, pred_obs_length_50)
plot(obs)
source('~/Documents/Bernhard.R')
source('~/Documents/Bernhard/fill_missing_values_with_zoo.R')
plot(9158*(1:10)-8321.8)
plot(9158*(1:50)-8321.8)
c(308.22,463.68,24.8,1.54,385.00,29.94,120.00,355.2,247.8,186.79,106.19,9.52,97.4,142.1,120)
sum(c(308.22,463.68,24.8,1.54,385.00,29.94,120.00,355.2,247.8,186.79,106.19,9.52,97.4,142.1,120))
sum(c(308.22,463.68,24.8,1.54,385.00,29.94,120.00,355.2,247.8,186.79,106.19,9.52,97.4,142.1,120))-1050
install.packages("rvest")
html_form("http://www.chainreactioncycles.com/")
library(rvest)
html_form("http://www.chainreactioncycles.com/")
submit_form("http://www.chainreactioncycles.com/")
?submit_form
?google_form
test <- html_session("http://www.chainreactioncycles.com/")
?html_session
s <- html_session("http://www.chainreactioncycles.com/")
s
html_form(s)
html_form(s)[[1]]
form <- html_form(s)[[1]]
submit_form(s, form, submit='seoQueryString')
submit_form(s, form, submit='heyhey')
?submit_form(s, form, submit='heyhey')
?submit_form(s, form)
submit_form(s, form)
form <- html_form(s)[[1]]
form
form <- html_form(s)[[1]]
form_completed <- set_values(form, "abc")
submit_form(s, form_completed)
j = submit_form(s, form_completed)
j
j = html_table(submit_form(s, form_completed))
j
form_completed <- set_values(form, "deore")
j = submit_form(s, form_completed)
j
clas(j)
class(j)
j = html_text(submit_form(s, form_completed))
j
form_completed <- set_values(form, submit="deore")
form_completed <- set_values(form, "deore")
j = submit_form(s, form_completed)
j
s <- html_session("http://www.chainreactioncycles.com/s?q=deore")
s
html_table(s)
s <- html_session("http://www.chainreactioncycles.com/s?q=xt")
html_table(s)
html_text(s)
s <- html_session("http://www.chainreactioncycles.com/s?q=xt")
class(s)
form_completed <- set_values(form, q="deore")
s <- html_session("http://www.chainreactioncycles.com/s?q=xt")
s <- html_session("http://www.chainreactioncycles.com/")
form <- html_form(s)[[1]]
form_completed <- set_values(form, q="deore")
form <- html_form(s)
form_completed <- set_values(form, q="deore")
s <- html_session("http://www.chainreactioncycles.com/s?q=xt")
s %>%
hml_table(fill=TRUE)
s %>%
html_table(fill=TRUE)
s %>%
html_text()
s %>%
html_tag()
s %>%
html_nodes()
s %>%
html_nodes("description")
s %>%
html_nodes("description") %>%
html_text()
setwd("~/Desktop/timelapse/prac/number_wang")
source("extract_timestamp.r")
setwd("~/Desktop/timelapse/prac/day_night")
source("night_or_day.r")
setwd("~/Desktop/timelapse/working")
# create a directory to store the images in
dir.create("images")
dir.create("finished")
files_to_process <- dir(pattern=".AVI")
i=1
system(paste0("ffmpeg -i ", files_to_process[i]," -f image2 -q:v 1 images/tmp-%03d.jpeg"))
images_to_process <- dir("images",pattern=".jpeg")
dates <- list()
is_dark <- list()
for(j in 1:length(images_to_process)){
datestamp <- extract_datestamp(paste0("images/",images_to_process[j]))
characters <- find_characters(datestamp, 14,14)
predicted_characters <- levels(timestamp_values)[max.col(predict(mod, characters))]
dates[[j]] <- ymd_hms(paste(as.character(predicted_characters), sep="", collapse = ""))
is_dark[[j]] <- max.col(predict(night_day_mod, get_sample(paste0("images/",images_to_process[j]))))==2
#is_dark[[j]] <- ifelse(is_dark[[j]], "_dark", "")
#  file_name <- paste0(format(dates[[j]], "%Y%m%d_%H%M%S"), is_dark[[j]], ".jpeg")
# system(paste0("mv images/",images_to_process[j], " images/", file_name))
}
dates <- do.call("c", dates)
is_dark <- do.call("c", is_dark)
dark_images <- !is_dark
midnight_image <- hour(dates)==0
remove_index <- (dark_images+midnight_image)==0
unlink(paste0("images/",images_to_process[remove_index]))
new_names <- paste0("tmp-", sprintf("%03d", 1:length(images_to_process[!remove_index])), ".jpeg")
for(j in 1:length(new_names)){
system(paste0("mv images/",images_to_process[!remove_index][j], " finished/", new_names[j]))
}
system(paste0("ffmpeg -f image2 -r 5 -i finished/tmp-%03d.jpeg -y -r 25 -q:v 1 final_",i,".mpg"))
1:10<5
which(1:10<5)
unwhich(which(1:10<5))
## Extract date and time stamp and invert the colours and create one channel - black or white.
library(lubridate)
library(jpeg)
library(nnet)
number_zero <- round(readJPEG("number_zero.jpeg"))
number_one <- round(readJPEG("number_one.jpeg"))
number_two <- round(readJPEG("number_two.jpeg"))
number_three <- round(readJPEG("number_three.jpeg"))
number_four <- round(readJPEG("number_four.jpeg"))
number_five <- round(readJPEG("number_five.jpeg"))
number_six <- round(readJPEG("number_six.jpeg"))
number_seven <- round(readJPEG("number_seven.jpeg"))
number_eight <- round(readJPEG("number_eight.jpeg"))
number_nine <- round(readJPEG("number_nine.jpeg"))
slash  <- round(readJPEG("slash.jpeg"))
dots  <- round(readJPEG("dots.jpeg"))
setwd("~/Desktop/timelapse/prac/number_wang")
## Extract date and time stamp and invert the colours and create one channel - black or white.
library(lubridate)
library(jpeg)
library(nnet)
number_zero <- round(readJPEG("number_zero.jpeg"))
number_one <- round(readJPEG("number_one.jpeg"))
number_two <- round(readJPEG("number_two.jpeg"))
number_three <- round(readJPEG("number_three.jpeg"))
number_four <- round(readJPEG("number_four.jpeg"))
number_five <- round(readJPEG("number_five.jpeg"))
number_six <- round(readJPEG("number_six.jpeg"))
number_seven <- round(readJPEG("number_seven.jpeg"))
number_eight <- round(readJPEG("number_eight.jpeg"))
number_nine <- round(readJPEG("number_nine.jpeg"))
slash  <- round(readJPEG("slash.jpeg"))
dots  <- round(readJPEG("dots.jpeg"))
covars <- rbind(
matrix(dots, nrow=1),
matrix(slash, nrow=1),
matrix(number_zero, nrow=1),
matrix(number_one, nrow=1),
matrix(number_two, nrow=1),
matrix(number_three, nrow=1),
matrix(number_four, nrow=1),
matrix(number_five, nrow=1),
matrix(number_six, nrow=1),
matrix(number_seven, nrow=1),
matrix(number_eight, nrow=1),
matrix(number_nine, nrow=1))
dim(covars)
covars[1,]
covars_df <- t(covars)
covars_df <- data.frame(t(covars))
names(covars_df) <- timestamp_values
names(covars_df) <- c(":", "/","num0","num1","num2","num3","num4","num5","num6","num7","num8","num9")
label <- c(":", "/","num0","num1","num2","num3","num4","num5","num6","num7","num8","num9")
as.vector(covars)
covars_df <- data.frame(value=as.vector(covars), character = rep(label, each=dim(covars)[2]))
covars_df
1:dim(covars)[1]
dim(covars)
covars_df <- data.frame(x = rep(1:dim(covars)[1], dim(covars)[2]),
y = rep(1:dim(covars)[2], dim(covars)[1])
value=as.vector(covars),
character = rep(label, each=dim(covars)[2]))
covars_df <- data.frame(x = rep(1:dim(covars)[1], dim(covars)[2]),
y = rep(1:dim(covars)[2], dim(covars)[1]),
value=as.vector(covars),
character = rep(label, each=dim(covars)[2]))
covars_df
ggplot() + geom_point(aes(x,y, colour=value), covars_df)
library(ggplot2)
ggplot() + geom_point(aes(x,y, colour=value), covars_df)
ggplot() + geom_raster(aes(x,y, colour=value), covars_df)
ggplot() + geom_tile(aes(x,y, colour=value), covars_df)
ggplot() + geom_tile(aes(x,y, colour=value), covars_df) + facet_wrap(~character)
ggplot() + geom_raster(aes(x,y, colour=value), covars_df) + facet_wrap(~character)
ggplot() + geom_raster(aes(x,y, fill=value), covars_df) + facet_wrap(~character)
ggplot() + geom_raster(aes(x,y, fill=as.factor(value)), covars_df) + facet_wrap(~character)
covars_df[1:192,]
ggplot() + geom_point(aes(x,y, colour=value),covars_df[1:192,])
ggplot() + geom_point(aes(y,x, colour=value),covars_df[1:192,])
covars_df <- data.frame(x = rep(1:dim(covars)[2], dim(covars)[1]),
y = rep(1:dim(covars)[1], dim(covars)[2]),
value=as.vector(covars),
character = rep(label, each=dim(covars)[2]))
ggplot() + geom_point(aes(y,x, colour=value),covars_df[1:192,])
covars <- rbind(
matrix(dots, nrow=1),
matrix(slash, nrow=1),
matrix(number_zero, nrow=1),
matrix(number_one, nrow=1),
matrix(number_two, nrow=1),
matrix(number_three, nrow=1),
matrix(number_four, nrow=1),
matrix(number_five, nrow=1),
matrix(number_six, nrow=1),
matrix(number_seven, nrow=1),
matrix(number_eight, nrow=1),
matrix(number_nine, nrow=1))
covars
covars[1,]
dim(covars)
196
196/16
196/15
196/14
matrix(covars[1,], 14, 14)
as.vector(matrix(covars[1,], 14, 14))
covars_df <- data.frame(x = rep(1:14, dim(covars)[1]),
y = rep(1:14, dim(covars)[1]),
value=as.vector(covars),
character = rep(label, each=dim(covars)[2]))
covars_df
rep(1:14, dim(covars)[1])
rep(1:14, each=dim(covars)[1])
covars_df <- data.frame(x = rep(1:14, dim(covars)[1]),
y = rep(1:14, each=dim(covars)[1]),
value=as.vector(covars),
character = rep(label, each=dim(covars)[2]))
ggplot() + geom_point(aes(y,x, colour=value),covars_df[1:192,])
covars_df[1:192,]
dim(covars)
14*14
as.vector(covars)
length(covars)
length(covars)/14
length(covars)/14/14
covars <- rbind(
matrix(dots, nrow=1),
matrix(slash, nrow=1),
matrix(number_zero, nrow=1),
matrix(number_one, nrow=1),
matrix(number_two, nrow=1),
matrix(number_three, nrow=1),
matrix(number_four, nrow=1),
matrix(number_five, nrow=1),
matrix(number_six, nrow=1),
matrix(number_seven, nrow=1),
matrix(number_eight, nrow=1),
matrix(number_nine, nrow=1))
label <- c(":", "/","num0","num1","num2","num3","num4","num5","num6","num7","num8","num9")
covars_df <- data.frame(x = rep(1:14, dim(covars)[1]),
y = rep(1:14, each=dim(covars)[1]),
value=as.vector(covars),
character = rep(label, each=dim(covars)[2]))
ggplot() + geom_point(aes(y,x, colour=value),covars_df[1:192,])
covars_df[1:(14*14)]
covars_df[1:(14*14),]
label <- c(":", "/","num0","num1","num2","num3","num4","num5","num6","num7","num8","num9")
covars_df <- data.frame(x = rep(1:14, dim(covars)[1]),
y = rep(1:14, each=14),
value=as.vector(covars),
character = rep(label, each=dim(covars)[2]))
ggplot() + geom_point(aes(y,x, colour=value),covars_df[1:192,])
covars_df[1:192,]
dim(covars)
ggplot() + geom_point(aes(y,x, colour=value),covars_df[1:196,])
head(covars_df[1:196,])
head(covars_df[1:196,], 10)
covars_df <- data.frame(y = rep(1:14, dim(covars)[1]),
x = rep(1:14, each=14),
value=as.vector(covars),
character = rep(label, each=dim(covars)[2]))
ggplot() + geom_point(aes(y,x, colour=value),covars_df[1:196,])
head(covars_df[1:196,], 10)
matrix(covars)
hea(matrix(covars))
head(matrix(covars))
head(matrix(covars, byrow=T))
head(matrix(covars, byrow=F))
head(matrix(covars, byrow=F), 10)
head(covars)
head(t(covars))
label <- c(":", "/","num0","num1","num2","num3","num4","num5","num6","num7","num8","num9")
covars_df <- data.frame(y = rep(1:14, dim(covars)[1]),
x = rep(1:14, each=14),
value=matrix(t(covars)),
character = rep(label, each=dim(covars)[2]))
head(covars_df)
ggplot() + geom_point(aes(y,x, colour=value),covars_df[1:196,])
ggplot() + geom_point(aes(x,y, colour=value),covars_df[1:196,])
ggplot() + geom_tile(aes(x,y, colour=value),covars_df[1:196,])
ggplot() + geom_tile(aes(x,y, fill=value),covars_df[1:196,])
ggplot() + geom_tile(aes(x,y, fill=value),covars_df)+ facet_wrap(~character)
ggplot() + geom_tile(aes(x,y, fill=value),covars_df)+ facet_wrap(~character) + scale_x_reverse()
ggplot() + geom_tile(aes(x,y, fill=value),covars_df)+ facet_wrap(~character) + scale_x_reverse() + scale_y_reverse()
ggplot() + geom_tile(aes(x,y, fill=value),covars_df)+ facet_wrap(~character)  + scale_y_reverse()
ggplot() + geom_tile(aes(x,y, fill=factor(value)),covars_df)+ facet_wrap(~character)  + scale_y_reverse()
covars_df <- data.frame(y = rep(14:1, dim(covars)[1]),
x = rep(1:14, each=14),
value=matrix(t(covars)),
character = rep(label, each=dim(covars)[2]))
ggplot() + geom_tile(aes(x,y, fill=factor(value)),covars_df)+ facet_wrap(~character)  + scale_y_reverse()
ggplot() + geom_tile(aes(x,y, fill=factor(value)),covars_df)+ facet_wrap(~character
)
library(ggplot2)
library(ggthemes)
ggplot() + geom_tile(aes(x,y, fill=factor(value)),covars_df)+ facet_wrap(~character) + theme_bw()
label <- c(":", "/","0","1","2","3","4","5","6","7","8","9")
covars_df <- data.frame(y = rep(14:1, dim(covars)[1]),
x = rep(1:14, each=14),
value=matrix(t(covars)),
character = rep(label, each=dim(covars)[2]))
library(ggplot2)
library(ggthemes)
ggplot() + geom_tile(aes(x,y, fill=factor(value)),covars_df)+ facet_wrap(~character) + theme_bw()
ggplot() + geom_tile(aes(x,y, fill=factor(value)),covars_df) +
facet_wrap(~character) + theme_bw() +
scale_fill_discrete(guide="none")
?scale_fill_discrete
ggplot() + geom_tile(aes(x,y, fill=factor(value)),covars_df) +
facet_wrap(~character) + theme_bw() +
scale_fill_discrete(guide="none", breaks = c(0,1))
scale_fill_manual
?scale_fill_manual
ggplot() + geom_tile(aes(x,y, fill=factor(value)),covars_df) +
facet_wrap(~character) + theme_bw() +
scale_fill_discrete(guide="none", breaks = c(0,1), values = c(0,1))
ggplot() + geom_tile(aes(x,y, fill=factor(value)),covars_df) +
facet_wrap(~character) + theme_bw() +
scale_fill_manual(guide="none", breaks = c(0,1), values = c(0,1))
ggplot() + geom_tile(aes(x,y, fill=factor(value)),covars_df) +
facet_wrap(~character) + theme_bw() +
scale_fill_manual(guide="none", breaks = c(0,1), values = c("black","white"))
plot(number_zero)
a <- readJPEG("number_zero.jpeg")
class(a)
plot(a)
lot_jpeg = function(path, add=FALSE)
{
require('jpeg')
jpg = readJPEG(path, native=T) # read the file
res = dim(jpg)[1:2] # get the resolution
if (!add) # initialize an empty plot area if add==FALSE
plot(1,1,xlim=c(1,res[1]),ylim=c(1,res[2]),asp=1,type='n',xaxs='i',yaxs='i',xaxt='n',yaxt='n',xlab='',ylab='',bty='n')
rasterImage(jpg,1,1,res[1],res[2])
}
plot_jpeg = function(path, add=FALSE)
{
require('jpeg')
jpg = readJPEG(path, native=T) # read the file
res = dim(jpg)[1:2] # get the resolution
if (!add) # initialize an empty plot area if add==FALSE
plot(1,1,xlim=c(1,res[1]),ylim=c(1,res[2]),asp=1,type='n',xaxs='i',yaxs='i',xaxt='n',yaxt='n',xlab='',ylab='',bty='n')
rasterImage(jpg,1,1,res[1],res[2])
}
plot_jpeg("number_zero.jpeg")
Start = c(1,10,20)
Finish = c(9,19,30)
mapply(Start, Finish, function(x,y)seq(x,y))
?mapply
mapply(function(x,y)seq(x,y),Start, Finish)
mapply(seq,Start, Finish)
ggplot() + geom_raster(aes(x,y, fill=as.factor(value)), covars_df) + facet_wrap(~character)
ggplot() + geom_tile(aes(x,y, fill=factor(value)),covars_df) +
facet_wrap(~character) + theme_bw() +
scale_fill_manual(guide="none", breaks = c(0,1), values = c("black","white"))
library(ggsnippets)
install.packages("devtools")
library(devtools)
install_github("johnDorian/ggsnippets")
?install_github("johnDorian/ggsnippets")
?install_github("ggsnippets","johnDorian")
install_github("ggsnippets","johnDorian")
?install_github("johnDorian/ggsnippets")
install_github("johnDorian/ggsnippets")
library(hydroTSM)
install.packages("hydroTSM")
library(hydroTSM)
hydrokrige
library(gstat)
?idw
automap::autoKrige
?automap::autoKrige
idw
library(gstat)
data(meuse.grid)
coordinates(meuse.grid) = ~x+y
gridded(meuse.grid) = TRUE
data(meuse)
coordinates(meuse) = ~x+y
zinc.idw = idw(zinc~1, meuse, meuse.grid)
library(gstat)
data(meuse)
coordinates(meuse) = ~x+y
meuse_grid = spsample(meuse, type = "regular", cellsize = c(40,40))
gridded(meuse_grid) = TRUE
data(meuse)
coordinates(meuse) = ~x+y
zinc.idw = idw(zinc~1, meuse, meuse.grid)
data(meuse)
library(gstat)
data(meuse)
library(gstat)
data(meuse.all)
coordinates(meuse) = ~x+y
meuse_grid = spsample(meuse, type = "regular", cellsize = c(40,40))
meuse.all
library(gstat)
data(meuse.all)
coordinates(meuse.all) = ~x+y
meuse_grid = spsample(meuse.all, type = "regular", cellsize = c(40,40))
data(meuse.all)
coordinates(meuse.all) = ~x+y
names(meuse.all)
coordinates(meuse.all) = ~x+y
library(sp)
data(meuse.all)
data(meuse)
coordinates(meuse.all) = ~x+y
data(meuse.grid)
library(sp)
library(gstat)
data(meuse)
coordinates(meuse) = ~x+y
data(meuse.grid)
coordinates(meuse.grid) = ~x+y
gridded(meuse.grid) = TRUE
zinc.idw = idw(zinc~1, meuse, meuse.grid)
zinc.idw
dim(meuse.grid)
meuse
?dist
data.frame(x=sample(1:100, 10), y=1, z= rnorm(10))
dat <- data.frame(x=sample(1:100, 10), y=1, z= rnorm(10))
dat
dat <- data.frame(x=sample(1:100, 10), y=1, z= rnorm(10))
dat_grid<- data.frame(x=1:100, y=1)
idw(z~1, dat. dat_grid)
idw(z~1, dat, dat_grid)
?idw
idw(z~1, locations=~x+y, dat, dat_grid)
?covar.spatial
library(geoR)
?covar.spatial
?cov
?cov.spatial
?dist
cov.spatial
library(geoR)
cov.spatial
q()
